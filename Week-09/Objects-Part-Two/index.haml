!!!
%html{:lang => "en"}
  %head
    / Third-Party CDNs
    %link{:crossorigin => "anonymous", :href => "https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css", :integrity => "sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO", :rel => "stylesheet"}
    %link{:crossorigin => "anonymous", :href => "https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css", :integrity => "sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN", :rel => "stylesheet"}
    %link{ href: "../prism/prism.css", rel: "stylesheet" }
    %link{:href => "shaun-styles.css", :rel => "stylesheet"}
    
    / Custom CSS
    %link{:href => "styles.css", :rel => "stylesheet"}

    %title Objects: Part Two

  %body
    .container
      %header#main-header.mt-5
        %h1 Objects: Part Two

      %hr
      %hr

      %article
        %main.my-5
          %header#secondary-header.mb-4
            %h2 Reduce, Reuse, RECYCLE - The Art of DRY Objects
            %hr

          .row
            .col-sm-12
              %p.content
                %span.emphasis DRY
                (Don't Repeat Yourself) is the act of programming modularly. Most high-level programming languages provide a way to build in a modular fashion, whether that's as simple as routines or functions, or as sophisticated as classes.

              %p.content
                %span.emphasis Classes
                are used to encapsulate an idea and create a blueprint. They 
                %span.emphasis describe
                a potential object; its properties; its functionality. Most C-based languages offer classes.

              %p.content
                %span.emphasis Below, I'm demonstrating classes in 2 languages:
                %strong C++
                demonstrates class building in a strict environment;
                %strong PHP
                demonstrates class building in a loose environment. Regardless, both examples accomplish the same task: 
                %span.emphasis Create a blueprint to make a person object.

            .col-sm-6
              %h3 Classes in C++
              %pre
                %code.language-cpp
                  :plain
                    class Person
                    {
                      public:
                        // properties
                        string name;
                        integer age;
                        vector<string> interests;

                        // constructor
                        Person (string name, integer age, vector<string> interests)
                        {
                          this->name = name;
                          this->age = age;
                          this->interests = interests;
                        }
                        
                        // methods
                        string bio ()
                        {
                          return "Hello I am " + name + 
                            " and I am " + age + " years old.";
                        }
                    }

            .col-sm-6
              %h3 Classes in PHP
              %pre
                %code.language-php
                  :plain             
                    class Person {
                      // properties
                      public $name;
                      public $age;
                      public $interests;
                      
                      // constructor
                      public function __construct ($name, $age, $interests) {
                        $this->name = $name;
                        $this->age = $age;
                        $this->interests = $interests;
                      }

                      // methods
                      public function bio () {
                        return "Hello I am " + name + 
                          " and I am " + age + " years old.";
                      }
                    }
            
          .row
            .col-sm-12
              %p.content
                However, neither of these exist yet in our application as accessible objects. At least, not until we instantiate them. They are simply blueprints of what an object can be and can do. The benefit of this is that we can have as many objects as we want. Each one can have a unique name, age, and set of interests, but all of them will follow the same format. If later we decide we want to add a new property to only one of our objects, we wouldn't be able to without adding the property to the class, or moving that property to a derived (child/inherited) class.
              
              %p.content
                That's why many developers love/get confused by JavaScript's objects. They aren't classes. They aren't as constrained or controlled as classes are. They are as dynamic as JavaScript is allowing more flexible usage. We can still define a base structure, but each object can grow and be individual as needed without needing more derived/inherited objects. In addition, we can add even more encapsulated functionality, like we would through inheritance, by utilizing a property that all JavaScript objects have: 
                %span.emphasis Prototype.

        %section
          %header
            %h3 The Problem...
            %hr
          
          .row
            .col-sm-6
              %p.content
                So far we have built very specific objects. 
                %span.emphasis person
                was an object that contained several defined properties, but was specific to only one person.

            .col-sm-6
              %pre
                %code.language-javascript
                  :plain
                    let person = {
                      name: "Shaun",
                      age: 39,
                      interests: ["programming", "Diablo", "cage fighting"],
                      talk: function () {
                        console.log("I'm 39");
                      },
                      walk: function (s) {
                        posX += 5;
                      },
                      toHTML: function (selector) {
                        let div = document.createElement('div');
                        div.textContent = this.bio();
                        document.querySelector(selector).append(div);
                      },
                      bio: function () {
                        console.log(this);
                        return `Hello I am ${this.name} 
                          and I'm a ${this.age} year old 
                          interested in ${this.interests[0]}`;
                      }
                    }
            
          %p.content
            %span.emphasis But what if we wanted to add another person? We could create a second version of the above code and just replace the information:

          .row
            .col-sm-6
              %pre
                %code.language-javascript
                  :plain
                    let person1 = {
                      name: "Shaun",
                      age: 39,
                      interests: ["programming", "Diablo", "cage fighting"],
                      toHTML: function (selector) {
                        let div = document.createElement('div');
                        div.textContent = this.bio();
                        document.querySelector(selector).append(div);
                      },
                      bio: function () {
                        console.log(this);
                        return `Hello I am ${this.name} 
                          and I'm a ${this.age} year old 
                          interested in ${this.interests[0]}`;
                      }
                    }
            .col-sm-6
              %pre
                %code.language-javascript
                  :plain
                    let person2 = {
                      name: "Janel",
                      age: 34,
                      interests: ["not programming", "not Diablo"],
                      toHTML: function (selector) {
                        let div = document.createElement('div');
                        div.textContent = this.bio();
                        document.querySelector(selector).append(div);
                      },
                      bio: function () {
                        console.log(this);
                        return `Hello I am ${this.name} 
                          and I'm a ${this.age} year old 
                          interested in ${this.interests[0]}`;
                      }
                    }

          %p.content
            But I'm sure you can see why that would become tedious and unmanageable.
            %br
            %span.emphasis What would I do if needed to create a 100 people?
            %br
            %span.emphasis What would I do if needed to give all the people a new property, like "gender"?
            %br
            %span.emphasis Where would I store the hundreds of lines of code? I mean, there is only so much memory!
        
        %section
          %header
            %h3 The Solution... OBJECT CONSTRUCTORS
            %hr

          %p.content
            %span.emphasis Object Constructors
            are simply just a standard function. We can use these to create a 
            %span.emphasis blueprint (just like classes do)
            for what we want an object to look like -- any necessary
            %span.emphasis properties
            it may need to contain.
            %br
            %span.emphasis !!! REMEMBER: Properties in JavaScript can contain any value type INCLUDING function definitions. !!!
          
          .row
            .col-sm-6
              %p.content
                In order for us to utilize object constructors we need to understand the concept of
                %span.emphasis this.
                %span.emphasis this
                is a powerful keyword in object oriented programming. In objects 
                %strong this
                represents the owner object, which in the case of an object constructor, would be the wrapping function.
              %p.content
                %span.emphasis REMEMBER:
                MOST things in JavaScript are already objects. This includes
                %span.emphasis<>
                  &nbsp;functions
                \.

            .col-sm-6
              %pre
                %code.language-javascript
                  :plain
                    // This is an object constructor. It is just a simple
                    // function. Remember: Most things in JavaScript are
                    // an Object. This includes functions!
                    function MyObjectConstructor (prop1, prop2, prop3) {
                      // 'this' refers to MyObjectConstructor
                      this.prop1 = prop1;
                      this.prop2 = prop2;
                      this.prop3 = prop3;
                    }

        %section
          %header
            %h3 Example: Let's create an Object Constructor
            %hr

          %p.content
            %span.emphasis REMEMBER: Object Constructors are just simply functions:

          %ol
            %li
              .inst Create a new object constructor for
              %span.emphasis person

              %pre
                %code.language-javascript
                  :plain
                    function Person (name, age, interests) {
                      this.name = name;
                      this.age = age;
                      this.interests = interests;
                    }

          %p.content
            %span.emphasis Above
            we created a new 
            %span.emphasis function 
            called 
            %span.emphasis Person 
            with 
            %span.emphasis 3 parameters
            \: 
            %span.emphasis name, age, and interests.

          %p.content
            Once again, don't forget:
            %span.emphasis REMEMBER: Object Constructors are just simply functions. You can call this function. It's not really going to do anything because it doesn't have a return value, but you're not going to break anything if you call it.
        
        %section
          %header
            %h3 Example: Adding Methods to our Object Constructor
            %hr

          %p.content
            We don't have any methods in our object constructor. We definitely need our 
            %span.emphasis bio
            and
            %span.emphasis toHTML
            methods so we can pass that functionality onto new objects we create with the constructor. So how do we do add the methods?

          %p.content
            There are 2 way:
            %span.emphasis 1) Properties: something we've done already!
            and
            %span.emphasis 2) Prototypes: our answer to adding new functionality and inheritance
            %small We'll be exploring prototypes next week. They're a rather large subject

          %p.content
            %span.emphasis Let's add our methods to our constructor using simple properties:
          
          %ol{ start: 2 }
            %li
              .inst Add the bio method to the object constructor function
              %pre
                %code.language-javascript
                  :plain
                    this.bio = function () {
                      console.log(this);
                      return `Hello I am ${this.name} and I'm a ${this.age} year old interested in ${this.interests[0]}`;
                    };
            %li
              .inst Add the toHTML method to the object constructor function
              %pre
                %code.language-javascript
                  :plain
                    this.toHTML = function (selector) {
                      let div = document.createElement('div');
                      div.textContent = this.bio();
                      document.querySelector(selector).append(div);
                    };

        %section
          %header
            %h3 Using an Object Constructor
            %hr

          %p.content
            What good is having this thing if we can't use it? Your likely goto method for using the object constructor would be to just execute it like any function:

          %pre
            %code.language-javascript
              :plain
                let shaun = Person("Shaun", 39, ["programming", "Diablo", "cage fighting"]);

          %p.content
            However, this will return 
            %span.emphasis undefined
            And you won't be able to access the name, age, or interests properties. So,
            %span.emphasis "What do we do?"
            to create our new person?
            %span.emphasis WE WILL NEED THE 'new' KEYWORD!

          %pre
            %code.language-javascript
              :plain
                let variable = new ObjectConstructor("argument", "argument", "argument");

          %p.content
            The 
            %span.emphasis new
            keyword is what makes this whole thing doable. 
            %span.emphasis new
            does the following:

          %ol
            %li It creates a new empty object
            %li
              It sets a new property on the object called
              %span.emphasis prototype
            %li
              It binds all the properties set with the
              %span.emphasis this
              keyword to the object
            %li It returns the newly created object

          %p.content
            So I imagine you've deduced the importance of the two keywords
            %span.emphasis this
            and
            %span.emphasis<>
              &nbsp;new
            \. Object constructors are just functions. That's it. That's all. 
            %span.emphasis this
            gives our function properties.
            %span.emphasis new
            turns our function into an object. Very much like
            %span.emphasis instantiating an object from a Class.
        
        %section
          %header
            %h3 Example: Using OUR Object Constructor
            %hr

          %p.content
            %span.emphasis Let's create some people using our object constructor:
          
          %ol{ start: 4 }
            %li
              .inst
                Create a new person named
                %span.emphasis Dave
                who is 
                %span.emphasis 42
                and likes 
                %span.emphasis cars, boats, and planes
              %pre
                %code.language-javascript
                  :plain
                    let dave = new Person("Dave", 42, ["cars", "boats", "planes"]);
            %li
              .inst
                Create a new person named
                %span.emphasis Arsh
                who is 
                %span.emphasis 25
                and likes 
                %span.emphasis jewelry, money, and wealth
              %pre
                %code.language-javascript
                  :plain
                    let arsh = new Person("Arsh", 25, ["jewelry", "money", "wealth"]);
            %li
              .inst
                Create a new person named
                %span.emphasis You
                who is 
                %span.emphasis Your age
                and likes 
                %span.emphasis things you like
              %pre
                %code.language-javascript
                  :plain
                    let shaun = new Person("Shaun", 39, ["Diablo", "Hitman", "water polo"]);
        
        %section
          %header
            %h3 Example: Adding a Unique Property to You
            %hr

          %p.content
            In most strict class based languages, adding dynamic properties is not possible. In PHP you can dynamically add properties but not methods. In Ruby you can't do either. This isn't the case in JavaScript. In JavaScript you can do both by just creating a new property on the object and assigning it a variable. This means that our 
            %span.emphasis objects can be unique
            from one another. Dave doesn't need to be the same as Arsh. Shaun can be different to. But now we have the power to start our objects with the same profile, then modify them with uniqueness afterwards.

          %p.content
            Adding a new property to an object is very simple:
          %pre
            %code.language-javascript
              :plain
                obj.newProperty = "value";
          %p.content
            We learned this in part one. Let's add a new property to the You object:

          %ol{ start: 7 }
            %li
              .inst
                Add a 
                %span.emphasis gender
                property to the 
                %span.emphasis You
                object and assign it a value

              %pre
                %code.language-javascript
                  :plain
                    shaun.gender = "unicorn";
          
          %p.content
            As you can see,
            %span.emphasis it's no different than adding properties to any object

          %p.content
            Let's output our objects!

          %ol{ start: 8 }
            %li
              .inst
                Output
                %span.emphasis Dave's
                bio to the 
                %span.emphasis #bio1
                HTMLElement
              %pre
                %code.language-javascript
                  :plain
                    dave.toHTML('#bio1');
              #bio1
            %li
              .inst
                Output
                %span.emphasis Arsh's
                bio to the 
                %span.emphasis #bio1
                HTMLElement
              %pre
                %code.language-javascript
                  :plain
                    arsh.toHTML('#bio2');
              #bio2
            %li
              .inst
                Output the following to the HTMLElement
                %span.emphasis #bio3
              %pre
                %code.language-javascript
                  :plain
                    const bio3 = document.querySelector('#bio3');
                    bio3.textContent = `${you.name} is a ${you.age} year old ${you.gender} who likes ${you.interests[0]}.`;
              #bio3


    %footer
      &copy;2018 - Shaun McKinnon
    
    / Third-Party CDNs
    %script{:crossorigin => "anonymous", :integrity => "sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=", :src => "https://code.jquery.com/jquery-3.3.1.min.js"}
    %script{:crossorigin => "anonymous", :integrity => "sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy", :src => "https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"}
    %script{ src: "../prism/prism.js" }
    
    / Custom JS
    %script{:src => "main.js"}
