!!!
%html{:lang => "en"}
  %head
    / Third-Party CDNs
    %link{:crossorigin => "anonymous", :href => "https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css", :integrity => "sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO", :rel => "stylesheet"}
    %link{:crossorigin => "anonymous", :href => "https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css", :integrity => "sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN", :rel => "stylesheet"}
    %link{ href: "../prism/prism.css", rel: "stylesheet" }
    %link{:href => "shaun-styles.css", :rel => "stylesheet"}
    
    / Custom CSS
    %link{:href => "styles.css", :rel => "stylesheet"}

    %title Object Prototypes: Part One

  %body
    .container
      %header#main-header.mt-5
        %h1 Object Prototypes: Part One

      %hr
      %hr

      %article
        %main.my-5
          %header#secondary-header.mb-4
            %h2 First: What does "By Reference" mean?
            %hr
          
          %section
            %p.content
              In programming, there 2 fundamental concepts of how data is passed around a program:
              %span.emphasis
                By Copy
              and
              %span.emphasis
                By Reference.
              It is important to understand this concept as it helps you understand how prototypal inheritance works.
            %p.content
              As we keep saying
              %span.emphasis "Most things in JavaScript are objects".
              Objects by their very nature are passed around by reference. This means that instead of creating a complete duplicate of the object only the
              %span.emphasis memory address of the object
              is passed. So, when you attempt to access any properties or methods, you're always accessing the original. The largest benefit to that is that any modifications to the original will obviously be available to any of the references.

            %p.content
              Let's look at an example of this:

            %pre
              %code.language-javascript
                :plain
                  // The original object
                  let MyObj = {
                    prop1: "Value 1",
                    prop2: "Value 2"
                  }
                  
                  // Creating a reference
                  let obj = MyObj;
                  console.log(obj.prop1, obj.prop2);
                  // Value 1 Value 2
                  
                  // Modifying the original object
                  MyObj.prop3 = "Value 3";
                  console.log(obj.prop3);
                  // Value 3
            
            %p.content
              Notice how the change in the 
              %span.emphasis MyObj object
              is immediately accessible to the
              %span.emphasis obj variable.
              References are incredibly efficient. If everything was passed by copy our available memory would quickly disappear.      

        %section
          %header
            %h3 Recap: Object Constructors
            %hr

          .row
            .col-sm-6
              %p.content
                In order for us to utilize object constructors we need to understand the concept of
                %span.emphasis this.
                %span.emphasis this
                is a powerful keyword in object oriented programming. In objects 
                %strong this
                represents the owner object, which in the case of an object constructor, would be the wrapping function.
              %p.content
                %span.emphasis REMEMBER:
                MOST things in JavaScript are already objects. This includes
                %span.emphasis<>
                  &nbsp;functions
                \.

            .col-sm-6
              %pre
                %code.language-javascript
                  :plain
                    // This is an object constructor. It is just a simple
                    // function. Remember: Most things in JavaScript are
                    // an Object. This includes functions!
                    function MyObjectConstructor (prop1, prop2, prop3) {
                      // 'this' refers to MyObjectConstructor
                      this.prop1 = prop1;
                      this.prop2 = prop2;
                      this.prop3 = prop3;
                    }

        %section
          %header
            %h3 Example: Let's recreate a new Person Object Constructor
            %hr

          %p.content
            %span.emphasis REMEMBER: Object Constructors are just simply functions. You can call this function. It's not really going to do anything because it doesn't have a return value, but you're not going to break anything if you call it.

          %ol
            %li
              .inst Create a new object constructor for
              %span.emphasis person

              %pre
                %code.language-javascript
                  :plain
                    function Person (firstName, lastName) {
                      this.firstName = firstName;
                      this.lastName = lastName;
                    }         
        
        %section
          %header
            %h3 Example: Using Objects as Values
            %hr

          %p.content
            In JavaScript we can assign any value to a property. It doesn't matter if it's a
            %span.emphasis string, number, array, function or another object.
            Because we have that power, we can turn our objects into very powerful data structures.

          %p.content
            We have created a person object constructor, but I want to add some other details to it. In the past, we've hardcoded the age of the person. I'd rather store their birthdate that way we can calculate their age when we need it. In order to do this, we'll assign a
            %span.emphasis new Date object
            to a 
            %span.emphasis dob
            property.
          
          %ol{ start: 2 }
            %li
              %pre
                %code.language-javascript
                  :plain
                    function Person (firstName, lastName, dob) {
                      // dob will need to be a string in this format: "1978/12/22"
                      this.dob = new Date(dob);
                    }

          %p.content
            The great thing about 
            %span.emphasis dob
            being a Date object is we can now use the properties and methods it brings with it to perform other functionality like calculating age or the difference between it and another date.

        %section
          %header
            %h3 Example: Instantiating Our Object
            %hr

          %p.content
            The 
            %span.emphasis new
            keyword is what makes this whole thing doable. 
            %span.emphasis new
            does the following:

          %ol
            %li It creates a new empty object
            %li
              It sets a new property on the object called
              %span.emphasis prototype
            %li
              It binds all the properties set with the
              %span.emphasis this
              keyword to the object
            %li It returns the newly created object

          %p.content
            %span.emphasis Let's create a new person using our object constructor:
          
          %ol{ start: 3 }
            %li
              .inst
                Create a new person with your
                %span.emphasis First Name
                and your
                %span.emphasis Last Name
                who has your 
                %span.emphasis dob (date of birth)
              %pre
                %code.language-javascript
                  :plain
                    let shaun = new Person("Shaun", "McKinnon", "1978/12/22");
            %li
              .inst
                Using
                %span.emphasis console.log(),
                output the person object.
              %pre
                %code.language-javascript
                  :plain
                    console.log(shaun);

          %p.content
            You should notice that in your 
            %span.emphasis console
            the 
            %span.emphasis Person
            object is displayed with the handy
            %span.emphasis
              %i.fa.fa-caret-down
            icon. If you click that, then click the 
            %span.emphasis
              %i.fa.fa-caret-down
            beside the 
            %span.emphasis dob
            property, you will notice a property called
            %span.emphasis __proto__.

          %p.content
            %span.emphasis __proto__
            is the first part of learning what prototypal inheritance is. Basically, the properties defined under __proto__ are inherited by the object with the __proto__ property. This means that our 
            %span.emphasis dob object
            is inheriting all the functionality you see under the __proto__ property. Because of this, we can easily use that functionality to perform operations on dob without having to create a whole bunch of new functionality. 

        %section
          %header
            %h3 Example: Using Our Object
            %hr

          %p.content
            %span.emphasis In Objects: Part Two
            we learned how to access the properties of our instantiated object:
          
          %ol{ start: 5 }
            %li
              .inst Access the first and last name properties
              %pre
                %code.language-javascript
                  :plain
                    console.log(shaun.firstName);
                    console.log(shaun.lastName);
            %li
              .inst Access the dob property
              %pre
                %code.language-javascript
                  :plain
                    console.log(shaun.dob)

          %p.content
            The 
            %span.emphasis dob property
            outputs a very verbose string
            %pre
              %code.language-javascript
                :plain
                  // Fri Dec 22 1978 00:00:00 GMT-0500 (Eastern Standard Time)
            That's quite a bit of information, and may not be what we want. The 
            %span.emphasis Date object
            has many properties that allow us to get/set and format our date. A very common way is to use the method 
            %span.emphasis .toLocaleDateString("locale-string").

          %ol{ start: 7 }
            %li
              .inst Access the first and last name properties
              %pre
                %code.language-javascript
                  :plain
                    console.log(shaun.dob.toLocaleDateString("en-CA"));
          
          %p.content
            You could also build your own date format function which would allow you to format it in a desired way:

          %ol{ start: 8 }
            %li
              .inst Create the following new date format function in the Person constructor object
              %pre
                %code.language-javascript
                  :plain
                    this.dateFormat = function () {
                      let year = this.dob.getYear();
                    }
            %li
              .inst
                Using
                %span.emphasis console.log(),
                call your new dateFormat function
              %pre
                %code.language-javascript
                  :plain
                    console.log(shaun.dateFormat());
        
        %section
          %header
            %h3 Explaining: .__proto__
            %hr

          %p.content
            Every object has a 
            %span.emphasis __proto__
            property. Seeing as how
            %span.emphasis "Most things in JavaScript are object!",
            you can assume 
            %span.emphasis most things have a property called __proto__.

          %p.content
            %strong
              %em BUT WHAT IS __proto__??? 
            __proto__ is a property that stores the reference relationship to an objects constructor and properties. Let's look at some common data types we work with, further proving most things are objects:
          
          %ol{ start: 10 }
            %li
              .inst
                Using
                %span.emphasis console.dir()
                output a new String
              %pre
                %code.language-javascript
                  :plain
                    console.dir(new String());
            %li
              .inst
                Using
                %span.emphasis console.dir()
                output a new Number
              %pre
                %code.language-javascript
                  :plain
                    console.dir(new Number());
            %li
              .inst
                Using
                %span.emphasis console.dir()
                output a new Array
              %pre
                %code.language-javascript
                  :plain
                    console.dir(new Array());
            %li
              .inst
                Using
                %span.emphasis console.dir()
                output a new Object
              %pre
                %code.language-javascript
                  :plain
                    console.dir(new Object());
            %li
              .inst
                Using
                %span.emphasis console.dir()
                output a new Function
              %pre
                %code.language-javascript
                  :plain
                    console.dir(new Function());
          
          %p.content
            If you utilize the 
            %span.emphasis
              %i.fa.fa-caret-down
            open the 
            %span.emphasis String
            object and look for the 
            %span.emphasis __proto__
            property. If you click on its
            %span.emphasis
              %i.fa.fa-caret-down
            you will see the list of available properties that the
            %span.emphasis String object
            has inherited.

          %p.content
            You may be asking
            %span.emphasis "Inheriting from where???".
            If you remember, we called 
            %span.emphasis new String()
            which returns an object. That object is inheriting from the 
            %span.emphasis String object.
            BUT WAIT!!! It get's worse...

          %p.content
            If you scroll to the very bottom of the list, you'll notice another 
            %span.emphasis __proto__property.
            That's because our object is inheriting from
            %span.emphasis String
            which happens to inherit from another object.
            %span.emphasis Object.

          %p.content
            If you try the same process with the other data types you'll see everyone of them eventually inherits from Object. If we did the same with an HTMLElement object, we'd see a very long inheritance list:

          %pre
            %code.language-javascript
              :plain
                const body = document.querySelector('body');
                console.dir(body);
                // body <- HTMLBodyElement <- HTMLElement <- Element <- Node <- EventTarget <- Object
        
        %section
          %header
            %h3 Explaining: .prototype
            %hr

          %p.content
            %span.emphasis Prototype
            is a property that is applied to all functions. This property exists to allow you to create inheritance to other properties and objects. 

          %p.content
            Let's create a new property on our Person constructor object that returns the age of our instantiated person:

          %ol{ start: 15 }
            %li
              .inst Add a function to the Person.prototype that will return the person's current age
              %pre
                %code.language-javascript
                  :plain
                    Person.prototype.getAge = function () {
                      let diff = Date.now() - dob.getTime();
                      let age = new Date(diff);
                      return Math.abs(age.getUTCFullYear() - 1970);
                    }
            %li
              .inst
                Using
                %span.emphasis console.log()
                output the currently instantiated person's age
              %pre
                %code.language-javascript
                  :plain
                    console.log(shaun.getAge());
          
          %p.content
            Our Person object has inherited the .getAge function definition. This should open your eyes to realizing that getAge() could be defined and assigned to any object, not just Person. The only requirement we're really looking for is that the object have a dob property.

          %p.content
            This is a simple example of extending our object using the
            %span.emphasis prototype
            property. We can further extend our object by having it inherit aspects of another object. Basically a parent -> child kind of relationship.

          %p.content
            Let's create a new constructor function called 
            %span.emphasis SuperHero
            and then we will have it inherit most of its blueprint from Person.

          %ol{ start: 17 }
            %li
              .inst
                Add a new constructor function called
                %span.emphasis SuperHero
              %pre
                %code.language-javascript
                  :plain
                    let SuperHero = function (alias, firstName, lastName, dob) {}
            %li
              .inst
                Add a new property called 
                %span.emphasis alias 
                and assign it the alias argument
              %pre
                %code.language-javascript
                  :plain
                    let SuperHero = function (alias, firstName, lastName, dob) {
                      this.alias = alias;
                    }
            %li
              .inst
                In order to inherit from our Person object, we must 
                %span.emphasis instantiate 
                it using the 
                %span.emphasis .call() method. 
                This is essentially like calling 
                %span.emphasis super() 
                in other languages as it will instantiate the Person object and assign its properties to SuperHero where they are not already defined
              %pre
                %code.language-javascript
                  :plain
                    let SuperHero = function (alias, firstName, lastName, dob) {
                      // ...
                      Person.call(this, firstName, lastName, dob);
                    }
            %li
              .inst
                In order to use all methods assigned to the Person prototype property, we must set a reference to it on our SuperHero constructor. Currently we have access to only the properties defined in the original Person structure, so we don't have access to .getAge(). To fix this, we will use Object.create which will assign the Person.prototype to our SuperHero.prototype
              %pre
                %code.language-javascript
                  :plain
                    SuperHero.prototype = Object.create(Person.prototype);
            %li
              .inst
                Create a new super hero
              %pre
                %code.language-javascript
                  :plain
                    let theIncredibleHulk = new SuperHero(
                      "The Incredible Hulk",
                      "Bruce",
                      "Banner",
                      "1956-11-7"
                    );
            %li
              .inst
                Using console.log, output the date of birth using the .dateFormat() and the age using the .getAge()
              %pre
                %code.language-javascript
                  :plain
                    console.log(theIncredibleHulk.dateFormat(), theIncredibleHulk.getAge());

    %footer
      &copy;2018 - Shaun McKinnon
    
    / Third-Party CDNs
    %script{:crossorigin => "anonymous", :integrity => "sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=", :src => "https://code.jquery.com/jquery-3.3.1.min.js"}
    %script{:crossorigin => "anonymous", :integrity => "sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy", :src => "https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"}
    %script{ src: "../prism/prism.js" }
    
    / Custom JS
    %script{:src => "main.js"}
